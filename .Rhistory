103288*2
unique(cast_edges$Target)
length(unique(cast_edges$Target))
vcount(actr_actr_graph)
View(actr_actr_graph)
actr_actr_pruned <- delete.edges(actr_actr_graph, which(E(actr_actr_graph)$weight == 1))
library(igraph)
library(tidyverse)
library(Matrix)
actr_actr_graph <- make_graph(actr_edges_vctr, directed = FALSE)
E(actr_actr_graph)$weight <- 1
actr_actr_graph <- igraph::simplify(actr_actr_graph, edge.attr.comb = list(weight="sum"))
actr_communities <- cluster_louvain(actr_actr_graph)
actr_actr_pruned <- igraph::delete.edges(actr_actr_graph, which(E(actr_actr_graph)$weight == 1))
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight == 1))
plot(testg)
# vcount(actr_actr_graph)
# ecount(actr_actr_graph)
#
# plot(actr_actr_graph)
#
testg <- make_graph(c("a","b","b","c","c","a","a","b","d","e"), directed = FALSE)
E(testg)$weight <- 1
testg <- igraph::simplify(testg, edge.attr.comb = list(weight="sum"))
communities(testg)
igraph::components(testg)
components(actr_actr_graph)$no
actr_actr_graph <- make_graph(actr_edges_vctr, directed = FALSE)
components(actr_actr_graph)$no
components(actr_actr_graph)$size
components(actr_actr_graph)$csize
components(actr_actr_graph)$no
components(actr_actr_pruned)$no
components(actr_actr_pruned)$csizes[components(actr_actr_pruned)$csizes>1]
components(actr_actr_pruned)$csizes
components(actr_actr_pruned)$csize
components(actr_actr_pruned)$csize[components(actr_actr_pruned)$csize>1]
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 2))
components(actr_actr_pruned)$no
components(actr_actr_graph)$no
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 2))
components(actr_actr_pruned)$no
components(actr_actr_pruned)$csize[components(actr_actr_pruned)$csize>1]
components(actr_actr_graph)$csize
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 2))
components(actr_actr_pruned)$no
length(E(actr_actr_pruned))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight == 1))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
components(actr_actr_pruned)$no
components(actr_actr_pruned)$csize[components(actr_actr_pruned)$csize>1]
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
actr_actr_graph <- make_graph(actr_edges_vctr, directed = FALSE)
E(actr_actr_graph)$weight <- 1
actr_actr_graph <- igraph::simplify(actr_actr_graph, edge.attr.comb = list(weight="sum"))
ecount(actr_actr_graph)
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight == 1))
ecount(actr_actr_pruned)
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight == 2))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 2))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
components(actr_actr_pruned)$no
components(actr_actr_pruned)$csize[components(actr_actr_pruned)$csize>1]
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 5))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
components(actr_actr_pruned)$no
components(actr_actr_pruned)$csize[components(actr_actr_pruned)$csize>1]
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 7))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
components(actr_actr_pruned)$no
components(actr_actr_pruned)$csize[components(actr_actr_pruned)$csize>1]
components(actr_actr_pruned)
components(actr_actr_pruned)$membership
components(actr_actr_pruned)$membership[1]
components(actr_actr_pruned)$membership[3]
components(actr_actr_pruned)$membership[[3]]
components(actr_actr_pruned)$membership[3]
community_membership <- components(actr_actr_pruned)$membership[3]
community_membership <- components(actr_actr_pruned)$membership
components(actr_actr_pruned)$csize[components(actr_actr_pruned)$csize>1]
components(actr_actr_pruned)$csize[components(actr_actr_pruned)$csize==14]
which(components(actr_actr_pruned)$csize>1)
which(components(actr_actr_pruned)$csize>5)
which(components(actr_actr_pruned)$csize>10)
community_membership[786]
community_membership
which(components(actr_actr_pruned)$csize>10)
community_membership==786
which(community_membership==786)
# vcount(actr_actr_graph)
# ecount(actr_actr_graph)
#
# plot(actr_actr_graph)
#
testg <- make_graph(c("a","b","b","c","c","a","a","b","d","e"), directed = FALSE)
E(testg)$weight <- 1
testg <- igraph::simplify(testg, edge.attr.comb = list(weight="sum"))
igraph::components(testg)
which(components(actr_actr_pruned)$csize>10)
which(community_membership==786)
which(community_membership==1)
which(community_membership==2)
which(community_membership==3)
which(components(actr_actr_pruned)$csize>5)
which(community_membership==370)
V(testg)$name
lapply(seq_along(comps$csize)[comps$csize >10], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])
comps <- components(actr_actr_pruned)$membership
which(components(actr_actr_pruned)$csize>10)
lapply(seq_along(comps$csize)[comps$csize >10], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])
comps <- components(actr_actr_pruned)
which(components(actr_actr_pruned)$csize>10)
lapply(seq_along(comps$csize)[comps$csize >10], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])
actors$Label[actor$id %in% big_clump]
actors$Label[actors$id %in% big_clump]
actors$Label[actors$Id %in% big_clump]
big_clump <- lapply(seq_along(comps$csize)[comps$csize >10], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])
actors$Label[actors$Id %in% big_clump]
actors$Id %in% big_clump
sum(actors$Label[actors$Id %in% big_clump])
sum(actors$Id %in% big_clump)
big_clump
V(actr_actr_pruned)$name[comps$membership %in% x])[[1]]
big_clump
big_clump <- lapply(seq_along(comps$csize)[comps$csize >10], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])[[1]]
big_clump
sum(actors$Id %in% big_clump)
actors$Label[actors$Id %in% big_clump]
cast_edges$Source[cast_edges$Target %in% big_clump]
cast_edges$Source[cast_edges$Target == big_clump]
cast_edges$Source[cast_edges$Target == big_clump[1]]
cast_edges$Source[cast_edges$Target == big_clump[1] && cast_edges$Target == big_clump[2]]
cast_edges$Source[cast_edges$Target == big_clump[1] & cast_edges$Target == big_clump[2]]
cast_edges$Source[cast_edges$Target == big_clump[1] && cast_edges$Target == big_clump[2]]
c(TRUE,TRUE)&&c(TRUE,FALSE)
c(TRUE,TRUE)*c(TRUE,FALSE)
boolean(c(TRUE,TRUE)*c(TRUE,FALSE))
c(TRUE,TRUE)&c(TRUE,FALSE)
cast_edges$Source[cast_edges$Target == big_clump[1] & cast_edges$Target == big_clump[2]]
cast_edges$Source[cast_edges$Target == big_clump[1] & cast_edges$Target == big_clump[3]]
cast_edges$Source[cast_edges$Target == big_clump[1] | cast_edges$Target == big_clump[1]]
cast_edges$Source[cast_edges$Target == big_clump[1] | cast_edges$Target == big_clump[2]]
actors$Label[actors$Id %in% big_clump]
cast_edges$Source[cast_edges$Target %in% big_clump]
actors$Label[actors$Id == big_clump[1]]
cast_edges$Source[cast_edges$Target == big_clump[1]]
movies_of_big_clumpers <- list()
for (i in 1:length(big_clump)){
movies_of_big_clumpers[[i]] <- cast_edges$Source[cast_edges$Target == big_clump[i]]
}
movies_of_big_clumpers
intersect(movies_of_big_clumpers)
length(movies_of_big_clumpers)
big_clump_movies <- movies_of_big_clumpers[[1]]
for (i in 2:length(movies_of_big_clumpers)){
big_clump_movies <- intersect(movies_of_big_clumpers[[i]], big_clump_movies)
}
big_clump_movies
big_clump_movies <- movies_of_big_clumpers[[1]]
big_clump_movies
intersect(movies_of_big_clumpers[[2]], big_clump_movies)
intersect(movies_of_big_clumpers[[3]], big_clump_movies)
for (i in 2:length(movies_of_big_clumpers)){
big_clump_movies <- intersect(movies_of_big_clumpers[[i]], big_clump_movies)
}
big_clump_movies
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 10))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
comps <- components(actr_actr_pruned)
which(components(actr_actr_pruned)$csize>10)
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 8))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
comps <- components(actr_actr_pruned)
which(components(actr_actr_pruned)$csize>10)
big_clump <- lapply(seq_along(comps$csize)[comps$csize >10], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])[[1]]
big_clump
sum(actors$Id %in% big_clump)
actors$Label[actors$Id %in% big_clump]
movies_of_big_clumpers <- list()
for (i in 1:length(big_clump)){
movies_of_big_clumpers[[i]] <- cast_edges$Source[cast_edges$Target == big_clump[i]]
}
big_clump_movies <- movies_of_big_clumpers[[1]]
intersect(movies_of_big_clumpers[[3]], big_clump_movies)
for (i in 2:length(movies_of_big_clumpers)){
big_clump_movies <- intersect(movies_of_big_clumpers[[i]], big_clump_movies)
}
big_clump_movies # there's no movie they all star in!
actr_actr_pruned <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight <= 10))
ecount(actr_actr_graph)
ecount(actr_actr_pruned)
comps <- components(actr_actr_pruned)
which(components(actr_actr_pruned)$csize>5)
which(components(actr_actr_pruned)$csize>1)
which(components(actr_actr_pruned)$csize>2)
which(components(actr_actr_pruned)$csize>3)
big_clump <- lapply(seq_along(comps$csize)[comps$csize >3], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])[[1]]
big_clump
sum(actors$Id %in% big_clump)
actors$Label[actors$Id %in% big_clump]
movies_of_big_clumpers <- list()
for (i in 1:length(big_clump)){
movies_of_big_clumpers[[i]] <- cast_edges$Source[cast_edges$Target == big_clump[i]]
}
big_clump_movies <- movies_of_big_clumpers[[1]]
for (i in 2:length(movies_of_big_clumpers)){
big_clump_movies <- intersect(movies_of_big_clumpers[[i]], big_clump_movies)
}
big_clump_movies # there's no movie they all star in!
which(components(actr_actr_pruned)$csize>1)
which(components(actr_actr_pruned)$csize>2)
big_clump <- lapply(seq_along(comps$csize)[comps$csize == 2], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])[[1]]
big_clump
sum(actors$Id %in% big_clump)
actors$Label[actors$Id %in% big_clump]
movies_of_big_clumpers <- list()
for (i in 1:length(big_clump)){
movies_of_big_clumpers[[i]] <- cast_edges$Source[cast_edges$Target == big_clump[i]]
}
big_clump_movies <- movies_of_big_clumpers[[1]]
intersect(movies_of_big_clumpers[[3]], big_clump_movies)
for (i in 2:length(movies_of_big_clumpers)){
big_clump_movies <- intersect(movies_of_big_clumpers[[i]], big_clump_movies)
}
big_clump_movies # there's no movie they all star in!
big_clump <- lapply(seq_along(comps$csize)[comps$csize > 3], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])[[1]]
big_clump
sum(actors$Id %in% big_clump)
actors$Label[actors$Id %in% big_clump]
big_clump <- lapply(seq_along(comps$csize)[comps$csize == 2], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])[[1]]
big_clump
sum(actors$Id %in% big_clump)
actors$Label[actors$Id %in% big_clump]
movies_of_big_clumpers <- list()
for (i in 1:length(big_clump)){
movies_of_big_clumpers[[i]] <- cast_edges$Source[cast_edges$Target == big_clump[i]]
}
big_clump_movies <- movies_of_big_clumpers[[1]]
intersect(movies_of_big_clumpers[[3]], big_clump_movies)
for (i in 2:length(movies_of_big_clumpers)){
big_clump_movies <- intersect(movies_of_big_clumpers[[i]], big_clump_movies)
}
big_clump_movies # there's no movie they all star in!
movies$Label[movies$Id %in% big_clump_movies]
movies$Genre[movies$Id %in% big_clump_movies]
movies$Label[movies$Id %in% big_clump_movies]
big_clump <- lapply(seq_along(comps$csize)[comps$csize > 3], function(x)
V(actr_actr_pruned)$name[comps$membership %in% x])[[1]]
big_clump
actors$Label[actors$Id %in% big_clump]
movies_of_big_clumpers <- list()
for (i in 1:length(big_clump)){
movies_of_big_clumpers[[i]] <- cast_edges$Source[cast_edges$Target == big_clump[i]]
}
big_clump_movies <- movies_of_big_clumpers[[1]]
for (i in 2:length(movies_of_big_clumpers)){
big_clump_movies <- intersect(movies_of_big_clumpers[[i]], big_clump_movies)
}
big_clump_movies # there's no movie they all star in!
movies_of_big_clumpers
do.call(rbind, movies_of_big_clumpers)
do.call(rbind, t(movies_of_big_clumpers))
do.call(rbind, movies_of_big_clumpers)
movies_of_big_clumpers
do.call(cbind, movies_of_big_clumpers)
c(movies_of_big_clumpers)
unlist(movies_of_big_clumpers)
big_clump_movies <- unique(unlist(movies_of_big_clumpers))
movies$Label[movies$Id %in% big_clump_movies]
eigen(A)
n <- 100
A <- TriDiag(rep(2,n),rep(1,n-1),rep(1,n-1))
b <- c(1,rep(0,n-2),-1)
i
TriDiag <- function(a,b,c, sparse = FALSE){
n <- length(a)
if (!sparse){
m <- diag(a)
diag(m[2:n, 1:(n-1)]) <- b
diag(m[1:(n-1), 2:n]) <- c
} else{
require(Matrix) # throw an error if this isn't gonna work
m <- spMatrix(n,n,i=1:n,j=1:n,x=a)
m <- m + spMatrix(n,n,i=2:n,j=1:(n-1),x=b) + spMatrix(n,n,i=1:(n-1),j=2:n,x=c)
}
m
}
n <- 100
A <- TriDiag(rep(2,n),rep(1,n-1),rep(1,n-1))
b <- c(1,rep(0,n-2),-1)
eigen(A)
jacobi(A,b, m=10000)
require(Matrix)
require(jpeg)
set.seed(365)
source("https://drive.google.com/uc?export=download&id=10dNH3VbvxS8Z3OHjP4i9gRbtsf91VVBb")
TriDiag <- function(a,b,c, sparse = FALSE){
n <- length(a)
if (!sparse){
m <- diag(a)
diag(m[2:n, 1:(n-1)]) <- b
diag(m[1:(n-1), 2:n]) <- c
} else{
require(Matrix) # throw an error if this isn't gonna work
m <- spMatrix(n,n,i=1:n,j=1:n,x=a)
m <- m + spMatrix(n,n,i=2:n,j=1:(n-1),x=b) + spMatrix(n,n,i=1:(n-1),j=2:n,x=c)
}
m
}
TriDiag(c(5,3,5,4,4), c(1,2,3,4), c(11,12,13,14))
TriDiag(c(5,3,5,4,4), c(1,2,3,4), c(11,12,13,14), sparse = TRUE)
n <- 100
A <- TriDiag(rep(2,n),rep(1,n-1),rep(1,n-1))
b <- c(1,rep(0,n-2),-1)
jacobi(A,b, m=10000)
eigen(A)
# the convergence is SUPER slow! 25 steps gets us nowhere close, and it's not until around 1000 steps its in the neighborhood of two decimal places correct.
eigen(-(inv(D)%*%R))
R <- A
diag(R) <- rep(0,n)
D <- diag(A)
eigen(-(inv(D)%*%R))
eigen(-(inverse(D)%*%R))
eigen(-((1/D)%*%R))
eigen(-(D)%*%R))
eigen(-(D)%*%R)
View(jacobi)
eigen(-R/d)
eigen(-R/D)
ThreeBanded=function(n,offset){
spMatrix(n,n,i=c(1:n,1:(n-1),2:n,(offset+1):n,1:(n-offset)),j=c(1:n,2:n,1:(n-1),1:(n-offset),(offset+1):n),x=c(.5+sqrt(1:n),rep(1,(2*(2*n-1-offset)))))
}
n=1000
A=ThreeBanded(n,100)
image(A)
R <- A
diag(R) <- rep(0,n)
d <- diag(R)
eigen(-R/d)
R
R/d
d <- diag(A)
eigen(-R/d)
max(abs(eigen(-R/d)$values))
jac.all.res <- jacobi(A,rep(1,n),x=rep(0,n),history = TRUE)
jac.all.res <- jacobi(A,rep(1,n),x=rep(0,n),history = TRUE, m=35)
jac.all.res <- jacobi(A,rep(1,n),x=rep(0,n),history = TRUE, m=35)
jac.res.norms <- rep(NA, 35)
for (i in length(jac.all.res$history)){
jac.res.norms[i] <- vnorm(rep(1,n) - A%*%jac.all.res$history[i])
}
jac.res.norms <- rep(NA, 35)
for (i in length(jac.all.res$history)){
jac.res.norms[i] <- vnorm(rep(1,n) - A%*%jac.all.res$history[[i]])
}
jac.all.res$history
jac.all.res$history[1]
jac.all.res$history[,1]
for (i in length(jac.all.res$history)){
jac.res.norms[i] <- vnorm(rep(1,n) - A%*%jac.all.res$history[,i])
}
for (i in length(jac.all.res$history[,1])){
jac.res.norms[i] <- vnorm(rep(1,n) - A%*%jac.all.res$history[,i])
}
for (i in length(jac.all.res$history[1,])){
jac.res.norms[i] <- vnorm(rep(1,n) - A%*%jac.all.res$history[,i])
}
grid()
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-2,1e2))
grid()
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-2,1e2))
jac.res.norms
for (i in length(jac.all.res$history[1,])){
jac.res.norms[i] <- vnorm(rep(1,n) - A%*%jac.all.res$history[,i])
}
jac.res.norms
for (i in length(jac.all.res$history[1,])){
print("a")
jac.res.norms[i] <- vnorm(rep(1,n) - A%*%jac.all.res$history[,i])
}
for (i in 1:35){
jac.res.norms[i] <- vnorm(rep(1,n) - A%*%jac.all.res$history[,i])
}
jac.res.norms
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-2,1e2))
grid()
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-2,1e2))
+grid()
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-2,1e2))
grid()
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-2,1e2))
GaussSeidel = function(A,b,m=25,x = rep(0,n),p=2,tol=0.5*10^(-6),history=FALSE) {
n = length(b)
if (history) {
hist = matrix(NA,nrow=length(b),ncol=(m+1))
hist[,1] = x
}
d = diag(A)
L = A
U = A
U[lower.tri(A,diag=TRUE)] = 0  # U is the upper triangular part of A
L[upper.tri(A,diag=TRUE)] = 0  # L is the lower triangular part of A
steps=0
for (j in 1:m) {
bu = b - U %*% x
steps = steps+1
for (i in 1:n){
x[i] = (bu[i] - L[i,] %*% x)/d[i]    # successivly update x as we use it.
}
if (history) {hist[,(j+1)] = as.matrix(x)}
if (vnorm(b-A%*%x,p) <= vnorm(b,p)*tol) break
}
if (history) return(list(x=x,iterations=steps,history = hist[,1:(steps+1)]))
else return(list(x=x,steps=steps))
}
gs.all.res <- GaussSeidel(A,rep(1,n),x=rep(0,n),history = TRUE, m=35)
gs.all.res <- GaussSeidel(A,rep(1,n),x=rep(0,n),history = TRUE, m=35)
gs.all.res <- GaussSeidel(A,rep(1,n),x=rep(0,n),history = TRUE, m=35)
gs.res.norms <- rep(NA, 35)
for (i in 1:35){
gs.res.norms[i] <- vnorm(rep(1,n) - A%*%gs.all.res$history[,i])
}
gs.res.norms
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
lines(0:35,gs.res.norms,pch=20,type="o",col="red")
plot(0:35,gs.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
plot(0:35,gs.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
gs.res.norms
plot(1:35,gs.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
lines(1:35,gs.res.norms,pch=20,type="o",col="red")
plot(1:35,gs.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
lines(1:35,gs.res.norms,pch=20,type="o",col="red")
plot(1:35,gs.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))+lines(1:35,gs.res.norms,pch=20,type="o",col="red")
plot(1:35,gs.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
plot(1:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
lines(1:35,gs.res.norms,pch=20,type="o",col="red")
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))
+lines(1:35,gs.res.norms,pch=20,type="o",col="red")
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))+lines(1:35,gs.res.norms,pch=20,type="o",col="red")
plot(0:35,jac.res.norms,pch=20,type="o",log="y",xlab="iteration (k)",ylab=expression("|| r"[k]~"||"[2]),col="blue",ylim=c(1e-4,1e2))+lines(1:35,gs.res.norms,pch=20,type="o",col="red")
rm(testg)
library(igraph)
library(tidyverse)
library(Matrix)
library(ggformula)
## This makes the graph, then turns multiedges into weighted edges
actr_actr_graph <- make_graph(actr_edges_vctr, directed = FALSE)
E(actr_actr_graph)$weight <- 1
actr_actr_graph <- igraph::simplify(actr_actr_graph, edge.attr.comb = list(weight="sum"))
min_weight <- 4
pruned_graph <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight < min_weight))
setwd("~/MATHCOMP479/tr1")
min_weight <- 2
pruned_graph <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight < min_weight))
vcount(pruned_graph)
min_weight <- 3
pruned_graph <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight < min_weight))
vcount(pruned_graph)
min_weight <- 2
pruned_graph <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight < min_weight))
ecount(pruned_graph)
min_weight <- 3
pruned_graph <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight < min_weight))
ecount(pruned_graph)
V(pruned_graph)
V(pruned_graph)$name
head(V(pruned_graph))
# vcount(actr_actr_graph)
# ecount(actr_actr_graph)
#
# plot(actr_actr_graph)
#
testg <- make_graph(c("a","b","b","c","c","a","a","b","d","e"), directed = FALSE)
V(testg)
verts <- V(testg)
verts <- V(testg)$deg
verts <- V(testg)$degree
degree(testg)
degree(testg)[1]
degree(testg)
V(pruned_graph)$name[which(degree(pruned_graph)>1)]
V(pruned_graph)$name[which(degree(actr_actr_graph)>1)]
V(pruned_graph)$name[which(degree(pruned_graph)>1)]
min_weight <- 2
pruned_graph <- igraph::delete_edges(actr_actr_graph, which(E(actr_actr_graph)$weight < min_weight))
ecount(pruned_graph)
V(pruned_graph)$name[which(degree(pruned_graph)>1)]
relevant_actrs <- actors %>% filter(Id %in% V(pruned_graph)$name[which(degree(pruned_graph)>1)])
setwd("~/MATHCOMP479/tr1")
write_csv(relevant_actrs, "relevant_actrs.csv")
